version: '3.9'
services:
  genesis:
    container_name: node-init-genesis
    image: ${GENESIS_IMAGE}
    entrypoint: cp /genesis.dat /data/genesis.dat
    network_mode: none
    volumes:
    - data:/data
    build:
      context: genesis
      args:
        genesis_file: ${GENESIS_VERSION}.dat
  oob_catchup:
    container_name: node-init-catchup
    image: curlimages/curl:latest
    user: root
    volumes:
    - data:/data
    entrypoint: |
      /bin/sh -c '
        [ -f /data/blocks.mdb ] ||
          curl -sSf https://catchup.${DOMAIN}/blocks_to_import.mdb -o /data/blocks.mdb
      '
  node:
    container_name: node
    image: ${NODE_IMAGE}
    entrypoint: /concordium-node
    environment:
    - CONCORDIUM_NODE_DATA_DIR=/data
    - CONCORDIUM_NODE_CONFIG_DIR=/config
    - CONCORDIUM_NODE_CONSENSUS_IMPORT_BLOCKS_FROM=/data/blocks.mdb
    - CONCORDIUM_NODE_CONNECTION_BOOTSTRAP_NODES=bootstrap.${DOMAIN}:8888
    - CONCORDIUM_NODE_RPC_SERVER_ADDR=0.0.0.0
    - CONCORDIUM_NODE_PROMETHEUS_SERVER=1
    - CONCORDIUM_NODE_PROMETHEUS_LISTEN_ADDRESSS=0.0.0.0
    # Defer container start until the init containers have completed successfully.
    # Note that no logs are emitted on stdout until all containers have started.
    # Also, this syntax requires Docker Compose v. 1.29+.
    depends_on:
      genesis:
        condition: service_completed_successfully
      oob_catchup:
        condition: service_completed_successfully
    networks:
    - concordium
    ports:
    - "8888:8888"   # P2P
    - "10000:10000" # gRPC
    - "9090:9090"   # Prometheus (metrics)
    volumes:
    - data:/data
    - config:/config
    build:
      context: .
      args:
        tag: ${NODE_TAG}
  node-collector:
    container_name: node-collector
    image: ${NODE_IMAGE}
    entrypoint: /node-collector
    environment:
    - CONCORDIUM_NODE_COLLECTOR_URL=https://dashboard.${DOMAIN}/nodes/post
    - CONCORDIUM_NODE_COLLECTOR_GRPC_HOST=http://node:10000
    - CONCORDIUM_NODE_COLLECTOR_NODE_NAME=${NODE_NAME}
    depends_on:
    - node
    networks:
    - concordium
  node-dashboard-grpc-proxy:
    container_name: node-dashboard-grpc-proxy
    image: envoyproxy/envoy:v1.18-latest
    entrypoint: /usr/local/bin/envoy --config-path /etc/envoy/envoy.yaml
    depends_on:
    - node
    networks:
    - concordium
    ports:
    - "9901:9901" # admin
    - "9999:9999" # proxy
    volumes:
    - ./node-dashboard/envoy.yaml:/etc/envoy/envoy.yaml:ro
  node-dashboard:
    container_name: node-dashboard
    image: ${NODE_DASHBOARD_IMAGE}
    depends_on:
    - node-dashboard-grpc-proxy
    networks:
    - concordium
    ports:
    - "8099:80" # web
    build:
      context: ./node-dashboard
      args:
        tag: main
volumes:
  data:
    name: ${DOMAIN}_data
  config:
    name: ${DOMAIN}_config
networks:
  concordium:
